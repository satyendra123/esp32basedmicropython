#espnow communication micropython
#Step-0 this is the code which tells the mac address of esp32. 
import network
import espnow
import time

sta = network.WLAN(network.STA_IF)
sta.active(True)
sta.disconnect()

e = espnow.ESPNow()
e.active(True)

peer1 = b'\xfc\xb4\x67\x92\x57\xf4'
peer2 = b'\xfc\xb4\x67\x92\x43\x68'

e.add_peer(peer1)
e.add_peer(peer2)

while True:
    try:
        e.send(peer1, "led on".encode())
        e.send(peer2, "led on".encode())
        time.sleep(1)  # Wait for 1 second

        e.send(peer1, "led off".encode())
        e.send(peer2, "led off".encode())
        time.sleep(1)  # Wait for 1 second
    except OSError as e:
        print("Error:", e)
    time.sleep(5)

#step 2 esp32 code slave-1 controller
import network
import espnow
from machine import Pin
import time

# Initialize WiFi in Station mode
sta = network.WLAN(network.STA_IF)
sta.active(True)
sta.disconnect()

# Initialize ESP-NOW
e = espnow.ESPNow()
e.active(True)

# LED pin
led = Pin(2, Pin.OUT)

# Main loop to receive messages and control the LED
while True:
    try:
        host, msg = e.recv()  # Receive messages
        if msg:
            print("Received message:", msg)
            if msg == b'end':
                break
            elif msg == b'led on':
                led.value(1)
            elif msg == b'led off':
                led.value(0)
    except OSError as e:
        print("Error receiving message:", e)
    time.sleep(1)  # Small delay to prevent tight loop



#Step-3 esp32 code slave-2 controller
import network
import espnow
from machine import Pin
import time

# Initialize WiFi in Station mode
sta = network.WLAN(network.STA_IF)
sta.active(True)
sta.disconnect()

# Initialize ESP-NOW
e = espnow.ESPNow()
e.active(True)

# LED pin
led = Pin(2, Pin.OUT)

# Main loop to receive messages and control the LED
while True:
    try:
        host, msg = e.recv()  # Receive messages
        if msg:
            print("Received message:", msg)
            if msg == b'end':
                break
            elif msg == b'led on':
                led.value(1)
            elif msg == b'led off':
                led.value(0)
    except OSError as e:
        print("Error receiving message:", e)
    time.sleep(1)  # Small delay to prevent tight loop

   
