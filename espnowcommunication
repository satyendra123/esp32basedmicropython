#espnow communication micropython
#Step-0 this is the code which tells the mac address of esp32. 
import network
# Initialize the WiFi interface in Station mode
sta = network.WLAN(network.STA_IF)
sta.active(True)
# Get the MAC address
mac_address = sta.config('mac')
# Print the MAC address in a readable format
print("MAC address:", ':'.join('{:02x}'.format(b) for b in mac_address))

#step 1 esp32 code master-1 controller

import network
import espnow
import time

# Initialize WiFi in Station mode
sta = network.WLAN(network.STA_IF)
sta.active(True)
sta.disconnect()

# Initialize ESP-NOW
e = espnow.ESPNow()
e.active(True)

# Define the MAC addresses of the slave devices
peer1 = b'\x5d\xde\xc3\x9c\x0d\x31'      # MAC address of slave1 WiFi interface
peer2 = b'\x11\x11\xee\xa9\xd2\xfc'      # MAC address of slave2 WiFi interface

# Add peers
e.add_peer(peer1)
e.add_peer(peer2)

# Send data to the slaves
for i in range(10000):
    # Send incrementing numbers as a string to peer1
    e.send(peer1, str(i) * 20)
    print("send:", i)
    
    # Send "led on" message to both peers
    e.send(peer1, "led on".encode())
    e.send(peer2, "led on".encode())
    time.sleep(1)
    
    # Send "led off" message to both peers
    e.send(peer1, "led off".encode())
    e.send(peer2, "led off".encode())

# Send 'end' message to both peers
e.send(peer1, b'end')
e.send(peer2, b'end')


#step 2 esp32 code slave-1 controller
import network
import espnow
from machine import Pin
import time

# Initialize WiFi in Station mode
sta = network.WLAN(network.STA_IF)
sta.active(True)
sta.disconnect()

# Initialize ESP-NOW
e = espnow.ESPNow()
e.active(True)

# LED pin
led = Pin(2, Pin.OUT)

# Main loop to receive messages and control the LED
while True:
    try:
        host, msg = e.recv()  # Receive messages
        if msg:
            print("Received message:", msg)
            if msg == b'end':
                break
            elif msg == b'led on':
                led.value(1)
            elif msg == b'led off':
                led.value(0)
    except OSError as e:
        print("Error receiving message:", e)
    time.sleep(1)  # Small delay to prevent tight loop


#Step-3 esp32 code slave-2 controller
import network
import espnow
from machine import Pin
sta = network.wlan(network.STA_IF)
sta.active(True)
sta.disconnect()
e=espnow.ESPNOW()
e.active(True)
led = Pin(2,pin.OUT)
while True:
    host, msg = e_recv()
    if msg:
       print(host,msg)
       if msg == b'end:
          break
       elif msg == b'led on:
          led.value(1)
       elif msg == b'led off:
          led.value(0)

   
