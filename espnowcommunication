#espnow communication micropython
#Step-0 this is the code which tells the mac address of esp32. 
import network
import espnow
import time

sta = network.WLAN(network.STA_IF)
sta.active(True)
sta.disconnect()

e = espnow.ESPNow()
e.active(True)

peer1 = b'\xfc\xb4\x67\x92\x57\xf4'
peer2 = b'\xfc\xb4\x67\x92\x43\x68'

e.add_peer(peer1)
e.add_peer(peer2)

while True:
    try:
        e.send(peer1, "led on".encode())
        e.send(peer2, "led on".encode())
        time.sleep(1)  # Wait for 1 second

        e.send(peer1, "led off".encode())
        e.send(peer2, "led off".encode())
        time.sleep(1)  # Wait for 1 second
    except OSError as e:
        print("Error:", e)
    time.sleep(5)

#step 2 esp32 code slave-1 controller
import network
import espnow
from machine import Pin
import time

# Initialize WiFi in Station mode
sta = network.WLAN(network.STA_IF)
sta.active(True)
sta.disconnect()

# Initialize ESP-NOW
e = espnow.ESPNow()
e.active(True)

# LED pin
led = Pin(2, Pin.OUT)

# Main loop to receive messages and control the LED
while True:
    try:
        host, msg = e.recv()  # Receive messages
        if msg:
            print("Received message:", msg)
            if msg == b'end':
                break
            elif msg == b'led on':
                led.value(1)
            elif msg == b'led off':
                led.value(0)
    except OSError as e:
        print("Error receiving message:", e)
    time.sleep(1)  # Small delay to prevent tight loop



#Step-3 esp32 code slave-2 controller
import network
import espnow
from machine import Pin
import time

# Initialize WiFi in Station mode
sta = network.WLAN(network.STA_IF)
sta.active(True)
sta.disconnect()

# Initialize ESP-NOW
e = espnow.ESPNow()
e.active(True)

# LED pin
led = Pin(2, Pin.OUT)

# Main loop to receive messages and control the LED
while True:
    try:
        host, msg = e.recv()  # Receive messages
        if msg:
            print("Received message:", msg)
            if msg == b'end':
                break
            elif msg == b'led on':
                led.value(1)
            elif msg == b'led off':
                led.value(0)
    except OSError as e:
        print("Error receiving message:", e)
    time.sleep(1)  # Small delay to prevent tight loop

   
# Note- the above code works as a wireless communication using espnow. in this i am not using the anycommunication like wifi, bluetooth something like this. in this using the esp32 mac address using the espnow ican send the data from one esp32 to other esp32
#in this i am making a system like one esp32 works as to send the temperature and humidity data to the slave controller. but the distance is very long so one esp32 will work as a repeater. means master esp32 will send the data to repeter esp32 and repeater esp32 will send the data to the slave esp32. so we can double the distance by using this method

# Step-1 esp32 as a master controller
import network
import espnow
import time
import dht
from machine import Pin

# Initialize WiFi in Station mode
sta = network.WLAN(network.STA_IF)
sta.active(True)
sta.disconnect()

# Initialize ESP-NOW
e = espnow.ESPNow()
e.active(True)

# Define the repeater MAC address
peer_repeater = b'\xfc\xb4\x67\x92\xXX\xXX'  # Replace with your repeater MAC address
e.add_peer(peer_repeater)

# Initialize DHT sensor
dht_pin = Pin(4)
dht_sensor = dht.DHT22(dht_pin)

while True:
    try:
        dht_sensor.measure()
        temp = dht_sensor.temperature()
        humidity = dht_sensor.humidity()
        msg = f"{temp},{humidity}"
        e.send(peer_repeater, msg.encode())
        time.sleep(2)
    except OSError as e:
        print("Error:", e)
    time.sleep(5)

#Step-2 esp32 as a repeater controller
import network
import espnow
import time

# Initialize WiFi in Station mode
sta = network.WLAN(network.STA_IF)
sta.active(True)
sta.disconnect()

# Initialize ESP-NOW
e = espnow.ESPNow()
e.active(True)

# Define the slave MAC address
peer_slave = b'\xfc\xb4\x67\x92\xXX\xXX'
e.add_peer(peer_slave)

while True:
    try:
        host, msg = e.recv()
        if msg:
            print("Received message:", msg)
            e.send(peer_slave, msg)
    except OSError as e:
        print("Error:", e)
    time.sleep(1)

#Step-3 esp32 as a slave controller
import network
import espnow
from machine import Pin
import time

# Initialize WiFi in Station mode
sta = network.WLAN(network.STA_IF)
sta.active(True)
sta.disconnect()

# Initialize ESP-NOW
e = espnow.ESPNow()
e.active(True)

# LED pin for indicator (optional)
led = Pin(2, Pin.OUT)

# Main loop to receive messages and print the sensor data
while True:
    try:
        host, msg = e.recv()  # Receive messages
        if msg:
            print("Received message:", msg)
            data = msg.decode()
            print("Temperature and Humidity:", data)
            # Optional: Toggle LED to indicate received message
            led.value(not led.value())
    except OSError as e:
        print("Error receiving message:", e)
    time.sleep(1)  # Small delay to prevent tight loop
